Add AI-powered viral score analysis with auto-apply suggestions and save everything to history
I need to add:

AI analysis explaining viral score ratings
"Apply AI Suggestions" button that auto-regenerates with fixes
Save all viral score data and AI analysis to content history database

Step 1: Create AI Analysis Service
Create new file: server/services/viralScoreAnalyzer.ts
typescriptimport { openai } from './openai';

interface ViralScoreAnalysis {
  overallSummary: string;
  hookFeedback: string;
  engagementFeedback: string;
  clarityFeedback: string;
  lengthFeedback: string;
  trendingFeedback: string;
  topActions: string[];
  improvementPrompt: string; // NEW: Prompt to regenerate with fixes
}

export async function analyzeViralScore(
  content: string,
  viralScore: {
    score: number;
    breakdown: {
      hookStrength: number;
      engagement: number;
      clarity: number;
      length: number;
      trending: number;
    };
    suggestions: string[];
  },
  productName?: string,
  niche?: string
): Promise<ViralScoreAnalysis> {
  const prompt = `You are a TikTok viral content expert. Analyze this script and its viral score breakdown.

SCRIPT:
${content}

PRODUCT: ${productName || 'N/A'}
NICHE: ${niche || 'general'}

VIRAL SCORE: ${viralScore.score}/100

BREAKDOWN:
- Hook Strength: ${viralScore.breakdown.hookStrength}/100
- Engagement: ${viralScore.breakdown.engagement}/100
- Clarity: ${viralScore.breakdown.clarity}/100
- Length: ${viralScore.breakdown.length}/100
- Trending: ${viralScore.breakdown.trending}/100

Provide analysis in this JSON format:
{
  "overallSummary": "2-3 sentence overview explaining the score and biggest strengths/weaknesses",
  "hookFeedback": "1 sentence on why hook scored this way, what's good/bad",
  "engagementFeedback": "1 sentence on engagement elements present/missing",
  "clarityFeedback": "1 sentence on readability and clarity",
  "lengthFeedback": "1 sentence on video length optimization",
  "trendingFeedback": "1 sentence on use of trending formats/phrases",
  "topActions": ["Action 1", "Action 2", "Action 3"],
  "improvementPrompt": "A specific instruction to regenerate this script with all improvements applied. Example: 'Rewrite this script starting with POV: format, add 4 emojis, include trending phrase tell me why, and add urgency word now in the CTA'"
}

Be specific, actionable, and reference the actual content. The improvementPrompt should be a complete instruction that can be used to regenerate the script.`;

  try {
    const response = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "system",
          content: "You are a TikTok virality expert. Analyze scripts and provide specific, actionable feedback. Return ONLY valid JSON."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      temperature: 0.7,
      max_tokens: 1000,
      response_format: { type: "json_object" }
    });

    const analysis = JSON.parse(response.choices[0].message.content || "{}");
    return analysis as ViralScoreAnalysis;
  } catch (error) {
    console.error("AI analysis error:", error);
    // Return fallback analysis
    return {
      overallSummary: "Your script has good potential with a viral score of " + viralScore.score + "/100. Focus on the suggestions below to improve.",
      hookFeedback: viralScore.breakdown.hookStrength >= 70 ? "Strong hook that grabs attention" : "Hook could be more attention-grabbing",
      engagementFeedback: viralScore.breakdown.engagement >= 70 ? "Good engagement elements present" : "Add more calls-to-action and questions",
      clarityFeedback: viralScore.breakdown.clarity >= 70 ? "Clear and easy to understand" : "Simplify language for better clarity",
      lengthFeedback: viralScore.breakdown.length >= 70 ? "Optimal length for TikTok" : "Adjust length to 100-170 words",
      trendingFeedback: viralScore.breakdown.trending >= 70 ? "Uses trending phrases well" : "Add trending TikTok phrases like 'POV:' or 'tell me why'",
      topActions: viralScore.suggestions.slice(0, 3),
      improvementPrompt: "Rewrite this script incorporating: " + viralScore.suggestions.join(", ")
    };
  }
}
Step 2: Update Database Schema
In shared/schema.ts, update the contentHistory table to include viral score data:
Find the contentHistory table definition and add these fields:
typescriptexport const contentHistory = pgTable("content_history", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").references(() => users.id),
  sessionId: text("session_id"),
  niche: text("niche").notNull(),
  contentType: text("content_type").notNull(),
  tone: text("tone").notNull(),
  productName: text("product_name").notNull(),
  promptText: text("prompt_text").notNull(),
  outputText: text("output_text").notNull(),
  platformsSelected: jsonb("platforms_selected"),
  generatedOutput: jsonb("generated_output"),
  affiliateLink: text("affiliate_link"),
  viralInspo: jsonb("viral_inspo"),
  modelUsed: text("model_used").notNull(),
  tokenCount: integer("token_count").notNull(),
  fallbackLevel: text("fallback_level"),
  aiModel: text("ai_model"),
  contentFormat: text("content_format"),
  topRatedStyleUsed: boolean("top_rated_style_used").default(false),
  
  // NEW VIRAL SCORE FIELDS
  viralScore: integer("viral_score"), // Overall score 0-100
  viralScoreBreakdown: jsonb("viral_score_breakdown"), // {hookStrength: 85, engagement: 70, ...}
  viralAnalysis: jsonb("viral_analysis"), // Full AI analysis object
  
  createdAt: timestamp("created_at").defaultNow().notNull(),
});
Step 3: Update Generate Content API
In server/api/generateContent.ts, after calculating viral score (around line 250):
typescript// Calculate viral score
const viralScore = calculateViralScore(content, validatedData.customHook || '');

// Generate AI analysis of the score
const { analyzeViralScore } = await import('../services/viralScoreAnalyzer');
const viralAnalysis = await analyzeViralScore(
  content, 
  viralScore,
  product,
  niche
);

// Save to database with viral score data
const contentHistoryEntry = await storage.saveContentHistory({
  userId: req.user?.id,
  sessionId: `session_${Date.now()}`,
  niche,
  contentType: templateType,
  tone,
  productName: product,
  promptText: prompt || `Generate ${templateType} content for ${product}`,
  outputText: content,
  platformsSelected: validatedData.platforms,
  generatedOutput: {
    content,
    hook: validatedData.customHook || '',
    platform: validatedData.platforms[0] || 'tiktok',
    niche,
    hashtags: [],
    affiliateLink: validatedData.affiliateUrl || '',
  },
  modelUsed: model || "gpt-4o",
  tokenCount: tokens || 0,
  fallbackLevel,
  aiModel,
  contentFormat: validatedData.contentFormat,
  topRatedStyleUsed: validatedData.useSmartStyle || false,
  
  // NEW: Save viral score data
  viralScore: viralScore.score,
  viralScoreBreakdown: viralScore.breakdown,
  viralAnalysis: viralAnalysis,
});

// Add to response
res.json({
  success: true,
  data: {
    content,
    // ... other fields
    viralScore,
    viralAnalysis,
    historyId: contentHistoryEntry.id, // Return history ID for reference
  }
});
Step 4: Update Storage Interface
In server/storage.ts, update the saveContentHistory method to accept viral score fields:
Find the saveContentHistory method and update the interface:
typescriptasync saveContentHistory(data: {
  userId?: number;
  sessionId?: string;
  niche: string;
  contentType: string;
  tone: string;
  productName: string;
  promptText: string;
  outputText: string;
  platformsSelected?: any;
  generatedOutput?: any;
  affiliateLink?: string;
  viralInspo?: any;
  modelUsed: string;
  tokenCount: number;
  fallbackLevel?: string;
  aiModel?: string;
  contentFormat?: string;
  topRatedStyleUsed?: boolean;
  viralScore?: number; // NEW
  viralScoreBreakdown?: any; // NEW
  viralAnalysis?: any; // NEW
}) {
  const [entry] = await db.insert(contentHistory).values({
    userId: data.userId,
    sessionId: data.sessionId,
    niche: data.niche,
    contentType: data.contentType,
    tone: data.tone,
    productName: data.productName,
    promptText: data.promptText,
    outputText: data.outputText,
    platformsSelected: data.platformsSelected,
    generatedOutput: data.generatedOutput,
    affiliateLink: data.affiliateLink,
    viralInspo: data.viralInspo,
    modelUsed: data.modelUsed,
    tokenCount: data.tokenCount,
    fallbackLevel: data.fallbackLevel,
    aiModel: data.aiModel,
    contentFormat: data.contentFormat,
    topRatedStyleUsed: data.topRatedStyleUsed,
    viralScore: data.viralScore, // NEW
    viralScoreBreakdown: data.viralScoreBreakdown, // NEW
    viralAnalysis: data.viralAnalysis, // NEW
  }).returning();
  
  return entry;
}
Step 5: Update Frontend Interface
In client/src/pages/GenerateContent.tsx, update the GeneratedContent interface:
typescriptinterface GeneratedContent {
  content: string;
  hook: string;
  platform: string;
  niche: string;
  videoDuration?: VideoDuration;
  viralScore?: {
    score: number;
    breakdown: {
      hookStrength: number;
      engagement: number;
      clarity: number;
      length: number;
      trending: number;
    };
    suggestions: string[];
  };
  viralAnalysis?: {
    overallSummary: string;
    hookFeedback: string;
    engagementFeedback: string;
    clarityFeedback: string;
    lengthFeedback: string;
    trendingFeedback: string;
    topActions: string[];
    improvementPrompt: string; // NEW
  };
  historyId?: number; // NEW
}
Step 6: Add "Apply AI Suggestions" Feature
In client/src/pages/GenerateContent.tsx, add this function after handleGenerateContent:
typescriptconst handleApplyAISuggestions = async () => {
  if (!generatedContent?.viralAnalysis?.improvementPrompt) {
    toast({
      title: "No Suggestions Available",
      description: "Generate content first to get AI suggestions",
      variant: "destructive"
    });
    return;
  }

  setIsGenerating(true);
  try {
    // Use the AI improvement prompt as custom instructions
    const response = await fetch('/api/generate-content', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        product: selectedProduct,
        niche: selectedNiche,
        platforms: selectedPlatforms,
        templateType: templateType,
        tone: tone,
        customHook: '', // Let AI create new hook based on suggestions
        affiliateUrl: smartRedirectUrl || productUrl,
        viralInspiration: viralInspo,
        productResearch: productResearch,
        competitorStyle: selectedCompetitorStyle,
        useSmartStyle: useSmartStyle,
        userId: 1,
        // NEW: Pass improvement instructions
        improvementInstructions: generatedContent.viralAnalysis.improvementPrompt
      }),
    });

    if (response.ok) {
      const result = await response.json();
      
      if (result.success && result.data) {
        const contentData: GeneratedContent = {
          content: result.data.content,
          hook: result.data.customHook || '',
          platform: selectedPlatforms[0] || 'tiktok',
          niche: selectedNiche,
          viralScore: result.data.viralScore,
          viralAnalysis: result.data.viralAnalysis,
          historyId: result.data.historyId
        };
        
        setGeneratedContent(contentData);
        
        toast({
          title: "Improved Script Generated! ✨",
          description: `New viral score: ${result.data.viralScore?.score || 'N/A'}/100`,
        });
      }
    } else {
      throw new Error('Generation failed');
    }
  } catch (error) {
    console.error('Apply suggestions error:', error);
    toast({
      title: "Generation Failed",
      description: error instanceof Error ? error.message : 'Unknown error',
      variant: "destructive",
    });
  } finally {
    setIsGenerating(false);
  }
};
Step 7: Update Content Generator to Use Improvement Instructions
In server/api/generateContent.ts, handle improvement instructions:
typescript// In the request validation schema, add:
const generateContentSchema = z.object({
  // ... existing fields
  improvementInstructions: z.string().optional(), // NEW
});

// In the content generation logic, after getting validated data:
let enhancedPrompt = userPrompt;

if (validatedData.improvementInstructions) {
  enhancedPrompt = `${userPrompt}

IMPORTANT IMPROVEMENTS TO APPLY:
${validatedData.improvementInstructions}

Apply these specific improvements while maintaining the core message about ${product}.`;
}

// Pass enhanced prompt to content generation
const result = await generateContent(
  product,
  templateType,
  tone,
  trendingProducts,
  niche,
  model,
  viralInspiration,
  smartStyleRecommendations,
  aiModel,
  enhancedPrompt // Pass the enhanced prompt with improvements
);
Step 8: Display Enhanced UI with Apply Button
Replace the viral score card JSX with this complete version:
typescript{/* Viral Score Card with AI Analysis and Apply Button */}
{generatedContent.viralScore && (
  <Card className="mt-4 border-purple-200">
    <CardHeader>
      <CardTitle className="flex items-center justify-between">
        <span className="flex items-center gap-2">
          <Sparkles className="h-5 w-5 text-purple-500" />
          📊 Viral Potential Score
        </span>
        <span className={`text-3xl font-bold ${
          generatedContent.viralScore.score >= 80 ? 'text-green-600' :
          generatedContent.viralScore.score >= 60 ? 'text-yellow-600' :
          'text-red-600'
        }`}>
          {generatedContent.viralScore.score}/100
        </span>
      </CardTitle>
    </CardHeader>
    <CardContent className="space-y-4">
      {/* AI Overall Analysis */}
      {generatedContent.viralAnalysis && (
        <div className="bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg p-4 border border-purple-200">
          <div className="flex items-start gap-2">
            <div className="bg-purple-100 rounded-full p-2 flex-shrink-0">
              <Sparkles className="h-4 w-4 text-purple-600" />
            </div>
            <div className="flex-1">
              <h4 className="font-semibold text-purple-900 mb-1">🤖 AI Analysis</h4>
              <p className="text-sm text-purple-800 leading-relaxed">
                {generatedContent.viralAnalysis.overallSummary}
              </p>
            </div>
          </div>
        </div>
      )}

      {/* Score Breakdown with AI Feedback */}
      <div className="space-y-3">
        {Object.entries(generatedContent.viralScore.breakdown).map(([key, value]) => {
          const feedbackKey = `${key}Feedback` as keyof typeof generatedContent.viralAnalysis;
          const feedback = generatedContent.viralAnalysis?.[feedbackKey];
          
          return (
            <div key={key} className="space-y-1">
              <div className="flex items-center gap-3">
                <span className="text-sm w-24 capitalize">
                  {key.replace(/([A-Z])/g, ' $1').trim()}:
                </span>
                <div className="flex-1 bg-gray-200 rounded-full h-2">
                  <div 
                    className={`h-2 rounded-full transition-all ${
                      value >= 80 ? 'bg-green-500' :
                      value >= 60 ? 'bg-yellow-500' :
                      'bg-red-500'
                    }`}
                    style={{ width: `${value}%` }}
                  />
                </div>
                <span className="text-sm font-semibold w-12 text-right">{value}/100</span>
              </div>
              {feedback && (
                <p className="text-xs text-gray-600 ml-28 italic">
                  {feedback}
                </p>
              )}
            </div>
          );
        })}
      </div>

      {/* Top Actions to Improve */}
      {generatedContent.viralAnalysis?.topActions && (
        <div className="bg-blue-50 rounded-lg p-4 border border-blue-200">
          <h4 className="font-semibold text-blue-900 mb-2 flex items-center gap-2">
            <Lightbulb className="h-4 w-4" />
            🎯 Top 3 Actions to Improve Score:
          </h4>
          <ul className="space-y-1">
            {generatedContent.viralAnalysis.topActions.map((action, i) => (
              <li key={i} className="text-sm text-blue-800 flex items-start gap-2">
                <span className="font-bold">{i + 1}.</span>
                <span>{action}</span>
              </li>
            ))}
          </ul>
        </div>
      )}

      {/* Action Buttons */}
      <div className="grid grid-cols-2 gap-3">
        {/* Apply AI Suggestions Button - Primary CTA */}
        {generatedContent.viralScore.score < 90 && generatedContent.viralAnalysis?.improvementPrompt && (
          <Button
            className="bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white"
            onClick={handleApplyAISuggestions}
            disabled={isGenerating}
          >
            {isGenerating ? (
              <>
                <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                Applying...
              </>
            ) : (
              <>
                <Zap className="h-4 w-4 mr-2" />
                ✨ Apply AI Suggestions
              </>
            )}
          </Button>
        )}

        {/* Regular Regenerate Button */}
        <Button
          variant="outline"
          className="border-orange-300 text-orange-700 hover:bg-orange-50"
          onClick={handleGenerateContent}
          disabled={isGenerating}
        >
          {isGenerating ? (
            <>
              <Loader2 className="h-4 w-4 mr-2 animate-spin" />
              Regenerating...
            </>
          ) : (
            <>
              <RefreshCw className="h-4 w-4 mr-2" />
              🔄 Regenerate
            </>
          )}
        </Button>
      </div>

      {/* Success message for high scores */}
      {generatedContent.viralScore.score >= 80 && (
        <div className="bg-green-50 border border-green-200 rounded-lg p-3">
          <p className="text-sm text-green-800 flex items-center gap-2">
            <span className="text-lg">🎉</span>
            <strong>Excellent viral potential!</strong> This script is ready to post.
          </p>
        </div>
      )}

      {/* Saved to history indicator */}
      {generatedContent.historyId && (
        <p className="text-xs text-gray-500 text-center">
          ✓ Saved to content history (ID: {generatedContent.historyId})
        </p>
      )}
    </CardContent>
  </Card>
)}
What This Implements:

AI Analysis - GPT-4 explains each score with specific feedback
Improvement Prompt - AI generates specific instructions to fix issues
"Apply AI Suggestions" Button - One-click regeneration with fixes applied
Database Storage - All viral scores and analysis saved to history
Visual Feedback - Shows when applying suggestions, success states
Smart UX - Only shows apply button if score < 90 (room for improvement)
History Tracking - Returns history ID so you can reference saved content

User Flow:

Generate content → Get 78/100 score
See AI analysis: "Add POV: hook, use 4 emojis, add urgency"
Click "Apply AI Suggestions" → AI regenerates with fixes
Get new score: 89/100 → Success! 🎉
All versions saved to history with scores

Database Migration Needed:
Run this SQL to add the new columns:
sqlALTER TABLE content_history
ADD COLUMN viral_score INTEGER,
ADD COLUMN viral_score_breakdown JSONB,
ADD COLUMN viral_analysis JSONB;

This is a complete game-changer feature. Users get:

✅ Understanding of their score (AI explains why)
✅ Specific actions to improve (3 clear steps)
✅ One-click fix (apply suggestions automatically)
✅ All saved to history (track improvements over time)