Please fix and enhance the Trend Forecaster component to ensure all 7 niches and all 4 categories (Hot, Rising, Upcoming, Declining) are consistently populated with data. Add a "Refresh All" button that refreshes all niches simultaneously.

Issues to Fix:

Perplexity API 400 Errors: The console shows repeated "Perplexity API error: 400 Bad Request" when calling the trend forecaster. This is likely due to malformed requests or rate limiting issues.

Incomplete Category Population: Currently only some categories are being filled while others remain empty, causing inconsistent user experience across niches.

Fallback Data Transparency: When fallback data is used, this should be clearly indicated in both the UI and console logs.

Missing Refresh All Functionality: There's no way to refresh all niches at once, requiring users to manually refresh each niche individually.

Requirements:

Fix Perplexity API Issues:

Debug the 400 Bad Request errors in server/services/perplexity/trendForecaster.ts
Ensure proper request formatting and headers
Add proper error handling and retry logic with exponential backoff
Implement rate limiting to avoid API overuse
Ensure Complete Data Population:

Modify the getTrendForecast function to guarantee all 4 categories (hot, rising, upcoming, declining) have at least 2-3 trends each
Enhance the validateTrendCompleteness function to be more strict
Improve the supplementTrendData function to fill missing categories more intelligently
Ensure consistent data structure across all niches
Add "Refresh All" Button:

Add a new button in client/src/components/TrendForecaster.tsx next to the existing refresh button
Implement a handleRefreshAll function that calls the forecast API for all 7 niches sequentially
Show loading state with progress indication (e.g., "Refreshing beauty... 1/7")
Display success/error states for each niche completion
Improve Fallback Data Handling:

Clearly mark in the UI when fallback data is being used (add a visual indicator like a warning icon or different background color)
Log detailed console messages when fallback data is triggered
Ensure fallback data in getFallbackTrends function provides complete coverage for all categories
Make fallback data more realistic and diverse
Enhanced Error Handling & User Feedback:

Show specific error messages when API calls fail
Implement toast notifications for refresh operations
Add a status indicator showing which niches have fresh vs. cached vs. fallback data
Include timestamps showing when each niche was last successfully refreshed
Consistency Improvements:

Ensure all 7 niches (beauty, tech, fashion, fitness, food, travel, pet) follow identical data structures
Standardize the product data format across all categories
Make sure the database storage (server/api/trend-forecast.ts) consistently saves all categories
Verify the trend history storage works correctly for all niches
UI Enhancements:

Add loading spinners for individual niche refreshes
Show data freshness indicators (e.g., "Updated 5 minutes ago" vs. "Using fallback data")
Implement better empty state handling when no data is available
Add tooltips explaining what each category means
API Reliability:

Add retry logic with exponential backoff for failed API calls
Implement circuit breaker pattern to prevent overwhelming the Perplexity API
Add request queuing to respect rate limits
Cache successful responses appropriately
Files to Focus On:

client/src/components/TrendForecaster.tsx - Add refresh all button and improved UI
server/services/perplexity/trendForecaster.ts - Fix API issues and improve data completeness
server/api/trend-forecast.ts - Ensure proper storage of all categories
server/api/trend-history.ts - Verify history tracking works for all niches
Expected Outcome:

All 7 niches consistently show data in all 4 categories
"Refresh All" button successfully updates all niches with visual progress
Clear indication when fallback data is used vs. fresh API data
Robust error handling that doesn't break the user experience
Consistent data structure and behavior across all niches and categories
Testing Requirements:

Test refresh all functionality with both successful and failed API responses
Verify fallback data displays correctly with proper indicators
Ensure database storage works consistently for all trend categories
Test the component behavior when Perplexity API is unavailable