🤖 Replit Agent Prompt - Multi-Niche Trend Forecaster
Copy and paste this directly into Replit Agent:

TASK: Update TrendForecaster to show trends for ALL 7 niches with tab navigation
Currently, the TrendForecaster component only shows beauty trends. I need it to show trends for all 7 niches (beauty, tech, fashion, fitness, food, travel, pets) with users able to switch between them using tabs.
Replace the entire file: client/src/components/TrendForecaster.tsx
Delete everything in that file and replace with this complete code:
typescriptimport { useQuery } from '@tanstack/react-query';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Flame, TrendingUp, Clock, TrendingDown, Loader2 } from 'lucide-react';
import { useLocation } from 'wouter';
import { useState } from 'react';

const NICHES = [
  { id: 'beauty', name: 'Beauty', icon: '💄' },
  { id: 'tech', name: 'Tech', icon: '📱' },
  { id: 'fashion', name: 'Fashion', icon: '👗' },
  { id: 'fitness', name: 'Fitness', icon: '💪' },
  { id: 'food', name: 'Food', icon: '🍽️' },
  { id: 'travel', name: 'Travel', icon: '✈️' },
  { id: 'pets', name: 'Pets', icon: '🐾' }
];

export default function TrendForecaster() {
  const [, setLocation] = useLocation();
  const [selectedNiche, setSelectedNiche] = useState('beauty');
  
  const { data: forecast, isLoading } = useQuery({
    queryKey: ['/api/trend-forecast', selectedNiche],
    refetchInterval: 3600000, // Refresh every hour
    enabled: !!selectedNiche
  });

  const handleProductClick = (productName: string, niche: string) => {
    setLocation(`/generate?product=${encodeURIComponent(productName)}&niche=${niche}`);
  };

  return (
    <Card className="border-purple-200 bg-gradient-to-br from-purple-50 to-pink-50">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          🔮 Trend Forecaster - All Niches
        </CardTitle>
        <p className="text-sm text-gray-600">
          Real-time TikTok trends powered by Perplexity AI
        </p>
      </CardHeader>
      <CardContent>
        {/* Niche Selector Tabs */}
        <Tabs value={selectedNiche} onValueChange={setSelectedNiche} className="w-full">
          <TabsList className="grid w-full grid-cols-7 mb-4">
            {NICHES.map((niche) => (
              <TabsTrigger key={niche.id} value={niche.id} className="text-xs">
                <span className="hidden sm:inline">{niche.icon} {niche.name}</span>
                <span className="sm:hidden">{niche.icon}</span>
              </TabsTrigger>
            ))}
          </TabsList>

          {NICHES.map((niche) => (
            <TabsContent key={niche.id} value={niche.id}>
              {isLoading ? (
                <div className="flex items-center justify-center py-8">
                  <Loader2 className="h-8 w-8 animate-spin text-purple-600" />
                  <span className="ml-2 text-gray-600">Loading {niche.name} trends...</span>
                </div>
              ) : (
                <TrendCategories 
                  forecast={forecast?.data} 
                  niche={niche.id}
                  onProductClick={handleProductClick}
                />
              )}
            </TabsContent>
          ))}
        </Tabs>

        {forecast?.data && (
          <div className="mt-4 text-xs text-gray-500 text-center">
            Last updated: {new Date(forecast.data.lastUpdated).toLocaleString()}
          </div>
        )}
      </CardContent>
    </Card>
  );
}

// Separate component for trend categories
function TrendCategories({ 
  forecast, 
  niche, 
  onProductClick 
}: { 
  forecast: any; 
  niche: string;
  onProductClick: (product: string, niche: string) => void;
}) {
  if (!forecast) {
    return (
      <div className="text-center py-8 text-gray-500">
        No trends available for this niche
      </div>
    );
  }

  return (
    <Tabs defaultValue="hot" className="w-full">
      <TabsList className="grid w-full grid-cols-4">
        <TabsTrigger value="hot">
          <Flame className="h-4 w-4 mr-1" /> Hot
        </TabsTrigger>
        <TabsTrigger value="rising">
          <TrendingUp className="h-4 w-4 mr-1" /> Rising
        </TabsTrigger>
        <TabsTrigger value="upcoming">
          <Clock className="h-4 w-4 mr-1" /> Upcoming
        </TabsTrigger>
        <TabsTrigger value="declining">
          <TrendingDown className="h-4 w-4 mr-1" /> Avoid
        </TabsTrigger>
      </TabsList>

      <TabsContent value="hot" className="space-y-3 mt-4">
        {forecast.hot?.map((item: any, i: number) => (
          <TrendCard
            key={i}
            item={item}
            type="hot"
            niche={niche}
            onProductClick={onProductClick}
          />
        ))}
      </TabsContent>

      <TabsContent value="rising" className="space-y-3 mt-4">
        {forecast.rising?.map((item: any, i: number) => (
          <TrendCard
            key={i}
            item={item}
            type="rising"
            niche={niche}
            onProductClick={onProductClick}
          />
        ))}
      </TabsContent>

      <TabsContent value="upcoming" className="space-y-3 mt-4">
        {forecast.upcoming?.map((item: any, i: number) => (
          <TrendCard
            key={i}
            item={item}
            type="upcoming"
            niche={niche}
            onProductClick={onProductClick}
          />
        ))}
      </TabsContent>

      <TabsContent value="declining" className="space-y-3 mt-4">
        {forecast.declining?.map((item: any, i: number) => (
          <TrendCard
            key={i}
            item={item}
            type="declining"
            niche={niche}
            onProductClick={onProductClick}
          />
        ))}
      </TabsContent>
    </Tabs>
  );
}

// Reusable trend card component
function TrendCard({ 
  item, 
  type, 
  niche, 
  onProductClick 
}: { 
  item: any; 
  type: 'hot' | 'rising' | 'upcoming' | 'declining';
  niche: string;
  onProductClick: (product: string, niche: string) => void;
}) {
  const styles = {
    hot: {
      border: 'border-red-200',
      title: 'text-red-700',
      badge: 'text-red-600 border-red-300',
      button: 'bg-red-500 hover:bg-red-600'
    },
    rising: {
      border: 'border-green-200',
      title: 'text-green-700',
      badge: 'text-green-600 border-green-300',
      button: 'bg-green-500 hover:bg-green-600'
    },
    upcoming: {
      border: 'border-blue-200',
      title: 'text-blue-700',
      badge: 'text-blue-600 border-blue-300',
      button: 'bg-blue-500 hover:bg-blue-600'
    },
    declining: {
      border: 'border-gray-200',
      title: 'text-gray-700',
      badge: 'text-gray-600 border-gray-300',
      button: 'bg-gray-500 hover:bg-gray-600'
    }
  };

  const style = styles[type];

  return (
    <div className={`bg-white rounded-lg p-4 border ${style.border}`}>
      <div className="flex items-start justify-between">
        <div className="flex-1">
          <h4 className={`font-semibold ${style.title}`}>{item.name}</h4>
          <p className="text-sm text-gray-600 mt-1">
            {item.why || item.opportunity || item.prepNow || item.reason}
          </p>
          <Badge variant="outline" className={`mt-2 ${style.badge}`}>
            {item.volume || item.growth || item.when || 'Declining'}
          </Badge>
        </div>
        {type !== 'declining' && (
          <Button 
            size="sm" 
            onClick={() => onProductClick(item.name, niche)}
            className={style.button}
          >
            Generate →
          </Button>
        )}
      </div>
    </div>
  );
}
Also update: client/src/pages/Dashboard.tsx
Find this line (around line 180-190):
typescript<TrendForecaster niche="beauty" />
Replace it with:
typescript<TrendForecaster />
That's it! The component now:

Shows 7 niche tabs at the top (Beauty, Tech, Fashion, Fitness, Food, Travel, Pets)
Each tab shows 4 sub-tabs (Hot, Rising, Upcoming, Declining)
Clicking any trend navigates to /generate with the product and correct niche pre-filled
Mobile responsive (shows icons only on small screens)
Auto-refreshes every hour
Shows loading state when switching niches

Test it by:

Opening Dashboard
Clicking each niche tab to see different trends
Clicking "Generate →" button on any trend
Verifying it navigates to /generate with correct product and niche
RetryClaude can make mistakes. Please double-check responses.