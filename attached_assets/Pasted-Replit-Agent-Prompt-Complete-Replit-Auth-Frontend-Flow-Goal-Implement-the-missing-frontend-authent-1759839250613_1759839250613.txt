Replit Agent Prompt: Complete Replit Auth Frontend Flow
Goal: Implement the missing frontend authentication UI and route protection for ScriptTok using the existing Replit Auth backend infrastructure.

Current State (DO NOT recreate):

✅ Backend auth middleware (authGuard, checkQuota) exists and works
✅ Two-environment auth system (dev/prod) configured in server/auth/adapters.ts
✅ Identity service and user management (server/services/identityService.ts)
✅ Database tables: users, userIdentities, subscriptions, monthlyUsage
✅ AuthProvider exists (client/src/components/AuthProvider.tsx) but incomplete
What's Missing (YOUR TASKS):

1. Update Landing Page (client/src/pages/LandingPage.tsx)
Landing page is already public ✓
Update the main CTA buttons to:
If user is NOT authenticated: Show "Start for Free" → opens auth modal/dialog
If user IS authenticated: Show "Go to Dashboard" → navigates to /dashboard
Add useAuth() hook to check authentication state
Add login dialog/modal component with Replit Auth button
2. Create Login Modal Component (client/src/components/LoginModal.tsx)
Build a <Dialog> component for login (use existing shadcn dialog)
Inside dialog: Display Replit Auth button with instructions
Use this login pattern:
function handleReplitLogin() {
  window.addEventListener("message", authComplete);
  const authWindow = window.open(
    "https://replit.com/auth_with_repl_site?domain=" + location.host,
    "_blank",
    "modal=yes, width=350, height=500"
  );
  
  function authComplete(e) {
    if (e.data !== "auth_complete") return;
    window.removeEventListener("message", authComplete);
    authWindow.close();
    location.reload(); // Reload to pick up authenticated state
  }
}
Show loading state during authentication
On success: close modal and redirect to dashboard
3. Create Protected Route Wrapper (client/src/components/ProtectedRoute.tsx)
Build a component that wraps protected routes
Check useAuth() state:
If isLoading: show loading spinner
If NOT isAuthenticated: show login modal (don't redirect away)
If isAuthenticated: render children
Usage example: <ProtectedRoute><Dashboard /></ProtectedRoute>
4. Update App Routing (client/src/App.tsx)
Keep / (landing) public ✓
Wrap these routes with <ProtectedRoute>:
/dashboard
/generate
/unified-generator
/content-history
/trend-history
/account
Keep these routes public:
/about, /how-it-works, /faq, /contact, /privacy, /terms, /compliance
5. Enhance AuthProvider (client/src/components/AuthProvider.tsx)
Current implementation has issues - fix these:

Dev mode: Auto-authenticate works but needs better UX feedback
Production mode: Need to properly handle Replit Auth headers
Add login() function that opens Replit Auth popup
Add logout() function that clears session
Check authentication on mount by fetching user headers:
In production: Check X-Replit-User-Id header via a backend endpoint like /api/auth/me
In dev: Auto-inject dev user immediately
6. Create Auth Status Endpoint (Backend - server/api/auth.ts)
Create GET /api/auth/me endpoint
Return current user info from headers:
X-Replit-User-Id
X-Replit-User-Name
X-Replit-User-Email
X-Replit-User-Profile-Image
Use authGuard middleware
Return JSON: { authenticated: true, user: {...} } or { authenticated: false }
7. Add Login UI to Layout (client/src/components/Layout.tsx)
In the header/navbar, add user profile section:
If authenticated: Show user avatar/name with dropdown menu (logout option)
If NOT authenticated: Show "Sign In" button that opens login modal
Use useAuth() to get user state
8. Dev Mode UX Improvements
Add visual indicator when in dev mode (small badge in corner: "Dev Mode")
Console log which user is auto-authenticated
Show dev user email in UI when authenticated in dev mode
9. Environment Configuration (Verify these exist in .env)
APP_ENV=development
DEV_USER_ID=00000000-0000-0000-0000-000000000001
DEV_USER_EMAIL=dev@scripttok.local
DEV_USER_NAME=Dev User
BYPASS_LIMITS=1
10. Testing Checklist (Add to README.md)
Create "Authentication" section in README with:

Dev mode testing: How auto-login works, bypass quotas
Production mode testing: How to test Replit Auth flow
Quota enforcement explanation
User identity management flow
Implementation Order:

Start with LoginModal.tsx component
Update AuthProvider.tsx to use the modal
Create /api/auth/me endpoint
Build ProtectedRoute.tsx wrapper
Update App.tsx routing
Enhance LandingPage.tsx CTAs
Update Layout.tsx header with auth UI
Add dev mode indicators
Update documentation
Important Constraints:

✅ Use existing Replit Auth system (NOT email/password)
✅ Keep two-environment setup (dev auto-login, prod Replit Auth)
✅ Don't modify existing database schema
✅ Don't recreate backend auth infrastructure
✅ Use shadcn/ui components for all UI elements
✅ Keep all existing routes and functionality
Expected Result:

Landing page with "Start for Free" button opens login modal
Login modal shows Replit Auth button
After login: user redirected to dashboard
Dashboard and all app routes protected
Dev mode: auto-login with dev user, bypass quotas
Production mode: require Replit Auth, enforce quotas
User can logout and see profile in header
This prompt leverages your existing 80% complete backend and focuses on the missing 20% frontend flow. The key insight: you already have Replit Auth working on the backend - you just need to wire up the frontend UI.