Goal: Implement automated daily trend fetching for both Trend Forecaster and AI-Powered Trending Picks that runs once per day and shares results across all users. Remove manual refresh buttons from the UI.

Requirements:
1. Backend - Automated Daily Trend Fetching
Task: Create a scheduled job system that fetches trends once per day for all niches automatically.

Implementation Steps:

Create a Scheduled Deployment or Cron Job:

Set up a Replit Scheduled Deployment that runs daily at a specific time (e.g., 12:00 AM UTC)
Schedule: "Every day at midnight UTC" or cron expression: 0 0 * * *
Timezone: UTC
Run command should execute a dedicated trend fetching script
Create Daily Trend Fetching Script:

File: server/services/dailyTrendFetcher.ts
This script should:
Fetch trends for ALL niches (beauty, tech, fashion, fitness, food, travel, pets)
Call both Trend Forecaster API (/api/trend-forecast/:niche) for each niche
Call Perplexity trends fetcher (/api/pull-perplexity-trends) for AI-Powered Trending Picks
Save all fetched data to trendingProducts table with timestamp
Save historical snapshots to trendHistory table for each fetch
Log success/failure for monitoring
Update Trend History Storage:

Modify server/storage.ts to include a saveTrendHistory method that saves:
Source type: 'trend_forecaster' or 'ai_trending_picks'
Niche
Fetch timestamp
Complete trend data (hot, rising, upcoming, declining categories for forecaster)
Product data with pricing
Raw data for reference
Ensure trend history is accessible by all users (no user-specific filtering)
Modify Trend Forecaster Service:

File: server/services/perplexity/trendForecaster.ts
Add a saveTrendSnapshot function that saves forecast results to trendHistory table
Include all trend categories (hot, rising, upcoming, declining)
Store product information with pricing data
Modify Perplexity Trends Service:

File: server/services/perplexityTrends.ts or relevant fetcher files
Add automatic saving to trendHistory table after successful fetch
Tag entries with sourceType: 'ai_trending_picks'
Update Trend Display APIs:

Modify server/api/trend-forecast.ts to read from database instead of making live API calls
Modify server/api/trending-categorized.ts to use cached daily data
Add endpoint: GET /api/trend-forecast/last-update that returns timestamp of last fetch
All endpoints should serve the same shared data to all users
2. Frontend - Remove Manual Refresh Buttons
Task: Remove all manual refresh controls and display shared daily trend data.

Files to Modify:

Dashboard (client/src/pages/Dashboard.tsx):

Remove "Run Perplexity Fetch" button
Remove any manual refresh logic
Add read-only timestamp display showing when trends were last updated
Display: "Trends updated daily at midnight UTC. Last update: [timestamp]"
Trend Forecaster Component (client/src/components/TrendForecaster.tsx):

Remove "Refresh" button
Remove "Refresh All" button
Remove all manual refresh logic and mutation handlers
Add timestamp display: "Last updated: [time]"
Keep query logic but only for reading cached data
AI Trending Picks Page (client/src/pages/TrendingAIPicks.tsx):

Remove "Run Perplexity Fetch" button
Remove manual refresh functionality
Add info banner: "Trends are automatically updated daily. Last update: [timestamp]"
Update Query Keys:

Ensure all trend-related queries use consistent cache keys
Set appropriate staleTime (e.g., 24 hours) since data updates daily
Remove invalidation calls tied to manual refresh
3. Trend History Access
Task: Make trend history accessible to all users.

Implementation:

Update Trend History API (server/api/trend-history.ts):

Remove user-specific filtering from queries
Return all historical trend data sorted by date
Add filtering options: by niche, by date range, by source type
Ensure no authentication-based restrictions
Trend History Page (client/src/pages/TrendHistory.tsx):

Should already work if backend removes user filtering
Add filters for: date range, niche, source type
Display shared historical data with clear timestamps
Add pagination if needed for large datasets
4. Database Schema Validation
Verify:

trendHistory table has all necessary columns:
sourceType (trend_forecaster or ai_trending_picks)
niche
fetchedAt timestamp
Trend-specific fields (trendCategory, trendName, trendDescription, etc.)
Product data JSON field
Raw data JSON field
5. Monitoring & Notifications
Add:

Logging:

Log each daily fetch with success/failure status
Log number of trends fetched per niche
Log any API errors or failures
Error Handling:

If daily fetch fails, keep using previous day's data
Add retry logic (up to 3 attempts with delays)
Send notification/log critical failures
Status Endpoint:

Create GET /api/trends/status endpoint
Returns: last successful fetch timestamp, number of trends in cache, health status
6. User Experience Updates
Add to UI:

Info Banners:

"Trends are automatically refreshed daily at midnight UTC"
"All users see the same trending data, updated once per day"
"Historical trends from previous days available in Trend History"
Last Update Display:

Show timestamp prominently on Dashboard
Show timestamp on Trend Forecaster
Show timestamp on AI Trending Picks page
Format: "Last updated: Oct 7, 2025 at 12:00 AM UTC"
Trend History Link:

Add prominent link/button to Trend History from Dashboard
Add to Trend Forecaster component
Label: "View Historical Trends"
Testing Checklist:
 Scheduled job runs successfully at midnight UTC
 All 7 niches fetch trends correctly
 Trend Forecaster data saves to database and trendHistory
 AI Trending Picks data saves to database and trendHistory
 All users see identical trend data
 No manual refresh buttons remain in UI
 Timestamps display correctly everywhere
 Trend History shows all historical data for all users
 Graceful fallback if daily fetch fails
 API endpoints serve cached data efficiently
Additional Notes:
Use Replit Scheduled Deployments (not cron packages) for reliability
Set appropriate database indexes on fetchedAt and niche columns for performance
Consider data retention policy (e.g., keep 90 days of history)
Ensure all timezone handling uses UTC consistently
Add rate limiting protection in case scheduled job runs multiple times accidentally
Files Expected to Change:
New Files:

server/services/dailyTrendFetcher.ts (main scheduled job script)
Modified Files:

server/api/trend-forecast.ts (read from cache instead of live API)
server/api/trending-categorized.ts (use cached data)
server/api/trend-history.ts (remove user filtering)
server/services/perplexity/trendForecaster.ts (add history saving)
server/services/perplexityTrends.ts (add history saving)
server/storage.ts (add trend history methods if not exists)
client/src/pages/Dashboard.tsx (remove refresh buttons, add timestamp)
client/src/components/TrendForecaster.tsx (remove refresh buttons)
client/src/pages/TrendingAIPicks.tsx (remove refresh buttons)
client/src/pages/TrendHistory.tsx (ensure no user filtering)
This prompt provides the Replit Agent with complete context to:

Set up automated daily trend fetching via Scheduled Deployment
Store shared trend data accessible to all users
Maintain historical records in trend history
Remove all manual refresh controls from the UI
Display appropriate timestamps and user notifications